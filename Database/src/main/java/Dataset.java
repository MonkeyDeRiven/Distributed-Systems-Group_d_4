/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-06-15")
public class Dataset implements org.apache.thrift.TBase<Dataset, Dataset._Fields>, java.io.Serializable, Cloneable, Comparable<Dataset> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dataset");

  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKey", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SENSOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SENSOR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorValue", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DatasetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DatasetTupleSchemeFactory();

  public int primaryKey; // required
  public int sensorID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String valueType; // required
  public int sensorValue; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIMARY_KEY((short)1, "primaryKey"),
    SENSOR_ID((short)2, "sensorID"),
    VALUE_TYPE((short)3, "valueType"),
    SENSOR_VALUE((short)4, "sensorValue"),
    TIMESTAMP((short)5, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIMARY_KEY
          return PRIMARY_KEY;
        case 2: // SENSOR_ID
          return SENSOR_ID;
        case 3: // VALUE_TYPE
          return VALUE_TYPE;
        case 4: // SENSOR_VALUE
          return SENSOR_VALUE;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIMARYKEY_ISSET_ID = 0;
  private static final int __SENSORID_ISSET_ID = 1;
  private static final int __SENSORVALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primaryKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SENSOR_ID, new org.apache.thrift.meta_data.FieldMetaData("sensorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSOR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("sensorValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dataset.class, metaDataMap);
  }

  public Dataset() {
  }

  public Dataset(
    int primaryKey,
    int sensorID,
    java.lang.String valueType,
    int sensorValue,
    java.lang.String timestamp)
  {
    this();
    this.primaryKey = primaryKey;
    setPrimaryKeyIsSet(true);
    this.sensorID = sensorID;
    setSensorIDIsSet(true);
    this.valueType = valueType;
    this.sensorValue = sensorValue;
    setSensorValueIsSet(true);
    this.timestamp = timestamp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dataset(Dataset other) {
    __isset_bitfield = other.__isset_bitfield;
    this.primaryKey = other.primaryKey;
    this.sensorID = other.sensorID;
    if (other.isSetValueType()) {
      this.valueType = other.valueType;
    }
    this.sensorValue = other.sensorValue;
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
  }

  public Dataset deepCopy() {
    return new Dataset(this);
  }

  @Override
  public void clear() {
    setPrimaryKeyIsSet(false);
    this.primaryKey = 0;
    setSensorIDIsSet(false);
    this.sensorID = 0;
    this.valueType = null;
    setSensorValueIsSet(false);
    this.sensorValue = 0;
    this.timestamp = null;
  }

  public int getPrimaryKey() {
    return this.primaryKey;
  }

  public Dataset setPrimaryKey(int primaryKey) {
    this.primaryKey = primaryKey;
    setPrimaryKeyIsSet(true);
    return this;
  }

  public void unsetPrimaryKey() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIMARYKEY_ISSET_ID);
  }

  /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKey() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIMARYKEY_ISSET_ID);
  }

  public void setPrimaryKeyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIMARYKEY_ISSET_ID, value);
  }

  public int getSensorID() {
    return this.sensorID;
  }

  public Dataset setSensorID(int sensorID) {
    this.sensorID = sensorID;
    setSensorIDIsSet(true);
    return this;
  }

  public void unsetSensorID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENSORID_ISSET_ID);
  }

  /** Returns true if field sensorID is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENSORID_ISSET_ID);
  }

  public void setSensorIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENSORID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getValueType() {
    return this.valueType;
  }

  public Dataset setValueType(@org.apache.thrift.annotation.Nullable java.lang.String valueType) {
    this.valueType = valueType;
    return this;
  }

  public void unsetValueType() {
    this.valueType = null;
  }

  /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
  public boolean isSetValueType() {
    return this.valueType != null;
  }

  public void setValueTypeIsSet(boolean value) {
    if (!value) {
      this.valueType = null;
    }
  }

  public int getSensorValue() {
    return this.sensorValue;
  }

  public Dataset setSensorValue(int sensorValue) {
    this.sensorValue = sensorValue;
    setSensorValueIsSet(true);
    return this;
  }

  public void unsetSensorValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENSORVALUE_ISSET_ID);
  }

  /** Returns true if field sensorValue is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENSORVALUE_ISSET_ID);
  }

  public void setSensorValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENSORVALUE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimestamp() {
    return this.timestamp;
  }

  public Dataset setTimestamp(@org.apache.thrift.annotation.Nullable java.lang.String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PRIMARY_KEY:
      if (value == null) {
        unsetPrimaryKey();
      } else {
        setPrimaryKey((java.lang.Integer)value);
      }
      break;

    case SENSOR_ID:
      if (value == null) {
        unsetSensorID();
      } else {
        setSensorID((java.lang.Integer)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValueType();
      } else {
        setValueType((java.lang.String)value);
      }
      break;

    case SENSOR_VALUE:
      if (value == null) {
        unsetSensorValue();
      } else {
        setSensorValue((java.lang.Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIMARY_KEY:
      return getPrimaryKey();

    case SENSOR_ID:
      return getSensorID();

    case VALUE_TYPE:
      return getValueType();

    case SENSOR_VALUE:
      return getSensorValue();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRIMARY_KEY:
      return isSetPrimaryKey();
    case SENSOR_ID:
      return isSetSensorID();
    case VALUE_TYPE:
      return isSetValueType();
    case SENSOR_VALUE:
      return isSetSensorValue();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Dataset)
      return this.equals((Dataset)that);
    return false;
  }

  public boolean equals(Dataset that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_primaryKey = true;
    boolean that_present_primaryKey = true;
    if (this_present_primaryKey || that_present_primaryKey) {
      if (!(this_present_primaryKey && that_present_primaryKey))
        return false;
      if (this.primaryKey != that.primaryKey)
        return false;
    }

    boolean this_present_sensorID = true;
    boolean that_present_sensorID = true;
    if (this_present_sensorID || that_present_sensorID) {
      if (!(this_present_sensorID && that_present_sensorID))
        return false;
      if (this.sensorID != that.sensorID)
        return false;
    }

    boolean this_present_valueType = true && this.isSetValueType();
    boolean that_present_valueType = true && that.isSetValueType();
    if (this_present_valueType || that_present_valueType) {
      if (!(this_present_valueType && that_present_valueType))
        return false;
      if (!this.valueType.equals(that.valueType))
        return false;
    }

    boolean this_present_sensorValue = true;
    boolean that_present_sensorValue = true;
    if (this_present_sensorValue || that_present_sensorValue) {
      if (!(this_present_sensorValue && that_present_sensorValue))
        return false;
      if (this.sensorValue != that.sensorValue)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + primaryKey;

    hashCode = hashCode * 8191 + sensorID;

    hashCode = hashCode * 8191 + ((isSetValueType()) ? 131071 : 524287);
    if (isSetValueType())
      hashCode = hashCode * 8191 + valueType.hashCode();

    hashCode = hashCode * 8191 + sensorValue;

    hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
    if (isSetTimestamp())
      hashCode = hashCode * 8191 + timestamp.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Dataset other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPrimaryKey()).compareTo(other.isSetPrimaryKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSensorID()).compareTo(other.isSetSensorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorID, other.sensorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValueType()).compareTo(other.isSetValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, other.valueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSensorValue()).compareTo(other.isSetSensorValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorValue, other.sensorValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Dataset(");
    boolean first = true;

    sb.append("primaryKey:");
    sb.append(this.primaryKey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorID:");
    sb.append(this.sensorID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueType:");
    if (this.valueType == null) {
      sb.append("null");
    } else {
      sb.append(this.valueType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorValue:");
    sb.append(this.sensorValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    if (this.timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DatasetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DatasetStandardScheme getScheme() {
      return new DatasetStandardScheme();
    }
  }

  private static class DatasetStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dataset> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dataset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIMARY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.primaryKey = iprot.readI32();
              struct.setPrimaryKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENSOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sensorID = iprot.readI32();
              struct.setSensorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.valueType = iprot.readString();
              struct.setValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENSOR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sensorValue = iprot.readI32();
              struct.setSensorValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dataset struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
      oprot.writeI32(struct.primaryKey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENSOR_ID_FIELD_DESC);
      oprot.writeI32(struct.sensorID);
      oprot.writeFieldEnd();
      if (struct.valueType != null) {
        oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
        oprot.writeString(struct.valueType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENSOR_VALUE_FIELD_DESC);
      oprot.writeI32(struct.sensorValue);
      oprot.writeFieldEnd();
      if (struct.timestamp != null) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.timestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DatasetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DatasetTupleScheme getScheme() {
      return new DatasetTupleScheme();
    }
  }

  private static class DatasetTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dataset> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dataset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPrimaryKey()) {
        optionals.set(0);
      }
      if (struct.isSetSensorID()) {
        optionals.set(1);
      }
      if (struct.isSetValueType()) {
        optionals.set(2);
      }
      if (struct.isSetSensorValue()) {
        optionals.set(3);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPrimaryKey()) {
        oprot.writeI32(struct.primaryKey);
      }
      if (struct.isSetSensorID()) {
        oprot.writeI32(struct.sensorID);
      }
      if (struct.isSetValueType()) {
        oprot.writeString(struct.valueType);
      }
      if (struct.isSetSensorValue()) {
        oprot.writeI32(struct.sensorValue);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dataset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.primaryKey = iprot.readI32();
        struct.setPrimaryKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sensorID = iprot.readI32();
        struct.setSensorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.valueType = iprot.readString();
        struct.setValueTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sensorValue = iprot.readI32();
        struct.setSensorValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

